<template>
  <v-container>
    <h1>{{ monster.name }}</h1>
    <v-divider></v-divider>

    <v-container v-if="isEditing">
      <v-form @submit.prevent="submit">
        <v-row>
          <v-text-field cols="12" md="4" label="Size" v-model="form_data.size" :readonly="!isEditing"/>
          <v-text-field cols="12" md="4" label="Type" v-model="form_data.type" :readonly="!isEditing"/>
          <v-text-field cols="12" md="4" label="Subype" v-model="form_data.subtype" :readonly="!isEditing"/>
        </v-row>


        <v-row justify="center">
          <v-col class="text-center">
            <v-btn type="submit" :loading="loading" :disabled="loading" outlined color="accent">Save</v-btn>
            <v-btn text color="accent" @click="resetFormData">Cancel</v-btn>
          </v-col>
        </v-row>
      </v-form>


    </v-container>

    <v-container v-esle>
      <v-row>
        <v-col>
          <v-col>
            <v-btn type="" outlined color="accent" @click="isEditing = true">Edit</v-btn>
          </v-col>

          <v-row>
            <v-text-field label="Size" v-model="form_data.size" :readonly="!isEditing"/>
            <v-text-field label="Type" v-model="form_data.type" :readonly="!isEditing"/>
            <v-text-field label="Subype" v-model="form_data.subtype" :readonly="!isEditing"/>
          </v-row>


          <v-row>
            <span class="boldedname">Armor Class:</span>
            <span>{{monster.armor_class}}</span>
            <span v-if="monster.armor_class_notes != null"> ({{monster.armor_class_notes}})</span>
            <span v-else></span>
          </v-row>

          <v-row>
            <span class="boldedname">Hit Points:</span>
            <span>{{monster.hit_point}} ({{monster.hit_dice}})</span>
          </v-row>


          <v-row v-if="monster.speeds.length > 0">
            <span class="boldedname">Speed:</span>
            <span v-for="(item, index) in monster.speeds" :key="item.id">
                            {{item.value}}
                            <span v-if="index+1 < monster.speeds.length">,</span>

                         </span>
          </v-row>

          <v-row>
            <v-col>
              <v-row>STR</v-row>
              <v-row>{{monster.ability_str}}</v-row>
            </v-col>
            <v-col>
              <v-row>DEX</v-row>
              <v-row>{{monster.ability_dex}}</v-row>
            </v-col>
            <v-col>
              <v-row>CON</v-row>
              <v-row>{{monster.ability_con}}</v-row>
            </v-col>
          </v-row>
          <v-row>
            <v-col>
              <v-row>INT</v-row>
              <v-row>{{monster.ability_int}}</v-row>
            </v-col>
            <v-col>
              <v-row>WIS</v-row>
              <v-row>{{monster.ability_wis}}</v-row>
            </v-col>
            <v-col>
              <v-row>CHA</v-row>
              <v-row>{{monster.ability_cha}}</v-row>
            </v-col>
          </v-row>
        </v-col>

        <v-col v-if="monster.image != null">
          <v-img
              :src="monster.image"
              max-width="250">
          </v-img>
        </v-col>
      </v-row>

      <v-divider></v-divider>

      <v-row v-if="monster.saves.length > 0">
        <span class="boldedname">Saving throws: </span>
        <span v-for="(item, index) in monster.saves" :key="item.id">
                    {{item.name}} +{{item.modifier}}
                    <span v-if="index+1 < monster.saves.length">,</span>
                </span>
      </v-row>

      <v-row v-if="monster.skills.length > 0">
        <span class="boldedname">Skills: </span>
        <span v-for="(item, index) in monster.skills" :key="item.id">
                    {{item.name}} +{{item.modifier}}
                    <span v-if="index+1 < monster.skills.length">,</span>
                </span>
      </v-row>

      <v-row v-if="monster.senses.length > 0">
        <span class="boldedname">Senses: </span>
        <span v-for="(item, index) in monster.senses" :key="item.id">
                    {{item.sense}}
                    <span v-if="index+1 < monster.senses.length">,</span>
                    </span>
      </v-row>

      <v-row v-if="monster.languages.length > 0">
        <span class="boldedname">Languages: </span>
        <span v-for="(item, index) in monster.languages" :key="item.id">
                    {{item.language}}
                    <span v-if="index+1 < monster.languages.length">,</span>
                </span>
      </v-row>

      <v-row>
        <span class="boldedname">Challenge Rating: </span>
        <span>{{monster.challenge_rating}}</span>
      </v-row>


      <v-row v-if="monster.damage_vulnerabilities.length > 0">
        <span class="boldedname">Damage Vulnerabilities: </span>
        <span v-for="(item, index) in monster.damage_vulnerabilities" :key="item.id">
                    {{item.damage_vulnerability}}
                    <span v-if="index+1 < monster.damage_vulnerabilities.length">,</span>
                </span>
      </v-row>
      <v-row v-if="monster.damage_resistances.length > 0">
        <span class="boldedname">Damage Resistances: </span>
        <span v-for="(item, index) in monster.damage_resistances" :key="item.id">
                    {{item.damage_resistance}}
                    <span v-if="index+1 < monster.damage_resistances.length">,</span>
                </span>
      </v-row>
      <v-row v-if="monster.condition_immunities.length > 0">
        <span class="boldedname">Condition Immunities: </span>
        <span v-for="(item, index) in monster.condition_immunities" :key="item.id">
                    {{item.condition_immunity}}
                    <span v-if="index+1 < monster.condition_immunities.length">,</span>
                </span>
      </v-row>
      <v-row v-if="monster.damage_immunities.length > 0">
        <span class="boldedname">Damage Immunities: </span>
        <span v-for="(item, index) in monster.damage_immunities" :key="item.id">
                    {{item.damage_immunity}}
                    <span v-if="index+1 < monster.damage_immunities.length">,</span>
                </span>
      </v-row>
      <v-divider></v-divider>
    </v-container>

    <v-container v-if="monster.traits.length > 0">
      <v-row class="subtitle">Traits</v-row>
      <v-row v-for="item in monster.traits" :key="item.id">
        <v-col>
          <v-row class="boldedname inline">{{item.name}}</v-row>
          <v-row class="text-justify">{{item.content}}</v-row>
        </v-col>
      </v-row>
    </v-container>


    <v-container v-if="monster.actions.length > 0">
      <v-row class="subtitle">Actions</v-row>
      <v-row class="mb-3" v-for="item in monster.actions" :key="item.id">
        <v-col>
          <v-row class="boldedname">{{item.name}}</v-row>
          <v-row class="text-justify">{{item.desc}}</v-row>
        </v-col>
      </v-row>
    </v-container>

    <v-container v-if="monster.reactions.length > 0">
      <v-row class="subtitle">Reactions</v-row>
      <v-row class="mb-3" v-for="item in monster.reactions" :key="item.id">
        <v-col>
          <v-row class="boldedname">{{item.name}}</v-row>
          <v-row class="text-justify">{{item.content}}</v-row>
        </v-col>
      </v-row>
    </v-container>

    <v-container v-if="monster.special_abilities.length > 0">
      <v-row class="subtitle">Special Abilities</v-row>
      <v-row class="mb-3" v-for="item in monster.special_abilities" :key="item.id">
        <v-col>
          <v-row class="boldedname">{{item.name}}</v-row>
          <v-row class="text-justify">{{item.desc}}</v-row>
        </v-col>
      </v-row>
    </v-container>

    <v-container v-if="monster.legendary_actions.length > 0">
      <v-row class="subtitle">Legendary Actions</v-row>
      <v-row class="mb-3" v-for="item in monster.legendary_actions" :key="item.id">
        <v-col>
          <v-row class="boldedname">{{item.name}}</v-row>
          <v-row class="text-justify">{{item.content}}</v-row>
        </v-col>
      </v-row>
    </v-container>

    <v-container v-if="monster.custom_attributes.length > 0">
      <v-row class="subtitle">Custom Attributes</v-row>
      <v-row class="mb-3" v-for="item in monster.custom_attributes" :key="item.id">
        <v-col>
          <v-row class="boldedname">{{item.name}}</v-row>
          <v-row class="text-justify">{{item.value}}</v-row>
        </v-col>
      </v-row>
    </v-container>


  </v-container>
</template>


<script>
    export default {
        head() {
            return {
                title: "View Monster"
            };
        },
        async asyncData({$axios, params}) {
            try {
                let monster = await $axios.$get(`/monsters/${params.id}`);
                let form_data = {
                    size: monster.size,
                    type: monster.type,
                    subtype: monster.subtype,
                    alignment: monster.alignment,
                    armor_class: monster.armor_class,
                    hit_point: monster.hit_point,
                    hit_dice: monster.hit_dice,
                    ability_str: monster.ability_str,
                    ability_dex: monster.ability_dex,
                    ability_con: monster.ability_con,
                    ability_int: monster.ability_int,
                    ability_wis: monster.ability_wis,
                    ability_cha: monster.ability_cha,
                    challenge_rating: monster.challenge_rating,
                };

                return {monster, form_data};
            } catch (e) {
                return {monster: []};
            }
        },
        data() {
            return {
                monster: {},
                loading: false,

                form_data: {
                    name: '',
                    size: '',
                    type: '',
                    subtype: '',
                    alignment: '',
                    armor_class: '',
                    hit_point: '',
                    hit_dice: '',
                    ability_str: '',
                    ability_dex: '',
                    ability_con: '',
                    ability_int: '',
                    ability_wis: '',
                    ability_cha: '',
                    challeng_rating: '',

                },

                alert: null,
                isEditing: false,
            };
        },
        methods: {
            resetFormData() {
                this.form_data = {
                    size: this.monster.size,
                    type: this.monster.type,
                    //first_name: this.user.first_name,
                    //last_name: this.user.last_name,
                }
                this.isEditing = false
            },
            submit() {
                if (this.isEditing == false) return
                this.alert = null
                this.loading = true
                api.updateMonster(this.$axios, this.monster.id, this.form_data)
                    .then(result => {
                        //console.log('/account/index.vue .then() result', result)
                        this.alert = {type: 'success', message: result.message || 'Success'}
                        this.loading = false
                        this.isEditing = false
                        this.monster.size = this.form_data.size
                        this.monster.type = this.form_data.type
                        this.monster.subtype = this.form_data.subtype


                        //this.user.last_name = this.form_data.last_name
                        //this.user.email = this.form_data.email
                    })
                    .catch(error => {
                        console.log('/account/index.vue .catch() error', error)
                        console.log('/account/index.vue .catch() error.response', error.response)
                        this.loading = false
                        if (error.response && error.response.data) {
                            this.alert = {
                                type: 'error',
                                message: error.response.data || 'Error'
                            }
                        }
                    })
            },
            onDelete(id) {
                console.log(id)
            }
        }
    };

</script>

<style scoped>
  .boldedname {
    font-weight: bold
  }

  span {
    margin-right: 3px
  }

  .subtitle {
    font-size: 30px;
    font-weight: bold;
  }

</style>
